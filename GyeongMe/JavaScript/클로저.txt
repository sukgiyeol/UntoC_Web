클로저 : 내부함수가 외부함수의 맥락(context)에 접근 할 수 있는것을 가르킨다

function outter(){ // 외부함수
    function inner(){ // 내부함수, var inner =function(){}과 같은 것으로 inner는 outter의 전역변수라고 생각할 수 있다.
      
        alert(title);
    }
    inner();
}
outter();



==> 내부함수에서 외부함수의 지역변수에 접근할 수 있다. 

function outter(){
    var title = 'coding everybody';  
    function inner(){        
        alert(title); // inner에는 없는 title에 접근이 가능하다.
    }
    inner();
}
outter();


==> 외부함수가 실행이 끝나서 외부함수가 소멸된 이후에도 내부함수가 외부함수의 변수에 접근 할 수 있다.

function outter(){
    var title = 'coding everybody';  
    return function(){        
        alert(title);
    }
}
var inner = outter(); //outter라는 함수는 여기서 실행이 끝나게된다.
inner(); // 이미 outter는 실행이 끝났지만, 외부함수에 있는 title이라는 변수에 접근이 가능하다


private variable : 정보를 아무나 수정할 수 없도록 설정된 변수

function factory_movie(title){
    return {
        get_title : function (){
            return title;
        },
        set_title : function(_title){
            title = _title
        }
    }
}
ghost = factory_movie('Ghost in the shell');
matrix = factory_movie('Matrix');
 
alert(ghost.get_title());
alert(matrix.get_title());
 
ghost.set_title('공각기동대'); //factory_movie의 지역변수인 title을 변경시킴
 
alert(ghost.get_title());
alert(matrix.get_title());


get_title과 set_title 메소드는 누구나 접근가능하지만 title 변수는 외부함수의 실행이 종료되었을 때 오직 두개의 메소드에 의해서만
접근이 가능해지기 때문에 private variable이 된다.



