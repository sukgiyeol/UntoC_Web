값으로서의 함수와 콜백

값으로서의 함수 : javascript는 함수도 객체다 == 일종의 값
값의 특징 1. 어떤변수에 바인딩 될 수 있다

function a(){} // 이 함수는 a라고 하는 자바스크립트의 변수에 담겨진 값이라고 할 수 있다
==> var a= function(){} 이것이 가능한 이유는 함수가 "값!!"이기 때문에

a={

	b:function(){} //b는 key의 역할,변수와 같은 역할 property라고 부름
		      //key에담겨있는 속성이 함수일 때 method라고 부른다
}; 
      

함수 : 밖에 정의되어있는 것
메소드 : 객체 안에 정의되어 있는 것


<First-Class Citizen>
1. 함수는 변수에 저장될 수 있다
2. 함수는 다른 함수의 인자(매개변수)로도 전달가능하다
3. 함수는 다른 함수의 리턴값으로도 사용가능하다
4. 함수는 배열의 값으로도 사용가능하다

위 4가지 조건으로 인해 자바스크립트 내의 함수는 First-Class-Citizen이라 불린다


콜백(Call Back) : 어떠한 함수가 수신하는 인자가 함수일 때

function sortNumber(a,b){
    // 위의 예제와 비교해서 a와 b의 순서를 바꾸면 정렬순서가 반대가 된다.
    return b-a;
}
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
alert(numbers.sort(sortNumber));

==> sort라는 메소드가 sortfunc라는 함수를 인자로 받아서 sort라는 함수의 동작방법을 완전하게 바꿀 수 있다.

원래의 sort메소드는 숫자를 문자처럼 인식하기 때문에 1다음에 2가아니라 10이오게 된다. 이 때 sortfunc라는 새로운
함수를 만들어서 sort에 새로운 값으로 넘겨주게 되면 함수의 동작방법을 완전히 바꿀수 있게된다.


비동기처리 

콜백은 비동기처리에서 유용하게 사용된다

만약 10000명의 구독자가 있다. 이때 글쓴이가 "글작성 -> 이메일발송 -> 작성완료" 의 단계를 거칠 때 10000명의 구독자에게 이메일을보내는데 10000초가
걸린다고 하면 간단한 단계인 작성완료 과정이 뒤늦게 실행된다. 이처럼 순차적으로 일처리를 하는 것을 "동기적처리"라고 한다.
그런데 만약 이메일발송을 예약하고 작성완료를 해버리면 순식간에 작업이 끝났다. 내부적으로 사용자에게 노출되지 않는 프로그램이 10000명의 구독자에게
이메일을 보내는 작업을 백그라운드에서 처리하는 것을 "비동기적처리"라고 한다. 이는 마치 TODO 개념으로 내가 해야할 일을 그때그때 하는 것이아니라 어느 곳에 메모를 해두고 시간이 났을 때 처리하는 형태이다.
